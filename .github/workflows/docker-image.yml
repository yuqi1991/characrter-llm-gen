name: Build and Push Docker Image to GHCR

on:
  push:
    tags:
    - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: '镜像标签 (可选，默认使用分支名)'
        required: false
        default: ''
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: character-llm-gen

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build-push.outputs.digest }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}
        tags: |
          type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event.inputs.tag != '' }}
          type=ref,event=branch,enable=${{ github.event.inputs.tag == '' && github.event_name == 'workflow_dispatch' }}
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix=sha-
        labels: |
          org.opencontainers.image.title=${{ env.IMAGE_NAME }}
          org.opencontainers.image.description=Character LLM Dataset Generator - A smart corpus generation and management tool
          org.opencontainers.image.vendor=${{ github.repository_owner }}
          org.opencontainers.image.licenses=MIT

    - name: Build and push Docker image
      id: build-push
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        # 获取第一个镜像标签
        IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
        echo "Testing image: $IMAGE_TAG"

        # 测试镜像是否能正常启动
        docker run --rm -d --name test-container \
          -p 7860:7860 \
          "$IMAGE_TAG"

        # 等待容器启动
        sleep 30

        # 检查健康状态
        if ! curl -f http://localhost:7860/; then
          echo "Health check failed"
          docker logs test-container
          docker stop test-container || true
          exit 1
        fi

        # 清理测试容器
        docker stop test-container

  create-release:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Extract tag name
      id: tag
      run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Generate release notes
      id: release_notes
      run: |
        cat > release_notes.md << 'EOF'
        ## 🚀 Character LLM Dataset Generator ${{ steps.tag.outputs.tag }}

        ### 📦 Docker 镜像

        ```bash
        # 拉取镜像
        docker pull ghcr.io/${{ github.repository }}:${{ steps.tag.outputs.tag }}

        # 运行容器
        docker run -d \
          --name character-llm-gen \
          -p 7860:7860 \
          -v $(pwd)/data:/app/data \
          -v $(pwd)/logs:/app/logs \
          -v $(pwd)/export:/app/export \
          ghcr.io/${{ github.repository }}:${{ steps.tag.outputs.tag }}
        ```

        ### 🔗 容器镜像地址
        - **GHCR**: `ghcr.io/${{ github.repository }}:${{ steps.tag.outputs.tag }}`
        - **Latest**: `ghcr.io/${{ github.repository }}:latest`

        ### 📋 更新内容
        详细的更新内容请查看提交历史。

        ### 🛠️ 部署方式
        1. **Docker 直接运行**（推荐）
        2. **Docker Compose 部署**
        3. **本地源码运行**

        详细部署指南请参考 [README.md](https://github.com/${{ github.repository }}/blob/main/README.md)
        EOF

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        release_name: Character LLM Dataset Generator ${{ steps.tag.outputs.tag }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(steps.tag.outputs.tag, 'alpha') || contains(steps.tag.outputs.tag, 'beta') || contains(steps.tag.outputs.tag, 'rc') }}

  notify:
    runs-on: ubuntu-latest
    needs: [ build-and-push ]
    if: always()

    steps:
    - name: Notify on success
      if: needs.build-and-push.result == 'success'
      run: |
        echo "✅ Docker镜像构建并推送到GHCR成功！"
        echo "📦 GHCR: ghcr.io/${{ github.repository }}"
        echo "🏷️ 镜像标签: ${{ needs.build-and-push.outputs.image-tag }}"
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/v* ]]; then
          echo "🚀 GitHub Release 已创建！"
          echo "📋 Release 链接: https://github.com/${{ github.repository }}/releases/tag/${GITHUB_REF#refs/tags/}"
        fi

    - name: Notify on failure
      if: needs.build-and-push.result == 'failure'
      run: |
        echo "❌ Docker镜像构建失败！"
        exit 1

    - name: Notify release failure
      if: needs.create-release.result == 'failure' && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      run: |
        echo "⚠️ GitHub Release 创建失败！"
        echo "Docker 镜像构建成功，但 Release 创建失败" 
