name: Build and Push Docker Image to GHCR

on:
  workflow_dispatch:
    inputs:
      tag:
        description: '镜像标签 (可选，默认使用分支名)'
        required: false
        default: ''
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: character-llm-gen

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build-push.outputs.digest }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}
        tags: |
          type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event.inputs.tag != '' }}
          type=ref,event=branch,enable=${{ github.event.inputs.tag == '' }}
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix=sha-
        labels: |
          org.opencontainers.image.title=${{ env.IMAGE_NAME }}
          org.opencontainers.image.description=Character LLM Dataset Generator - A smart corpus generation and management tool
          org.opencontainers.image.vendor=${{ github.repository_owner }}
          org.opencontainers.image.licenses=MIT

    - name: Build and push Docker image
      id: build-push
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        # 获取第一个镜像标签
        IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
        echo "Testing image: $IMAGE_TAG"

        # 测试镜像是否能正常启动
        docker run --rm -d --name test-container \
          -p 7860:7860 \
          "$IMAGE_TAG"

        # 等待容器启动
        sleep 30

        # 检查健康状态
        if ! curl -f http://localhost:7860/; then
          echo "Health check failed"
          docker logs test-container
          docker stop test-container || true
          exit 1
        fi

        # 清理测试容器
        docker stop test-container

    - name: Generate artifact attestation
      uses: actions/attest-build-provenance@v1
      with:
        subject-name: ${{ env.REGISTRY }}/${{ github.repository }}
        subject-digest: ${{ steps.build-push.outputs.digest }}
        push-to-registry: true

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      contents: read
      packages: read
      security-events: write

    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ fromJSON(needs.build-and-push.outputs.image-tag)[0] }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  notify:
    runs-on: ubuntu-latest
    needs: [ build-and-push, security-scan ]
    if: always()

    steps:
    - name: Notify on success
      if: needs.build-and-push.result == 'success'
      run: |
        echo "✅ Docker镜像构建并推送到GHCR成功！"
        echo "📦 GHCR: ghcr.io/${{ github.repository }}"
        echo "🏷️ 镜像标签: ${{ needs.build-and-push.outputs.image-tag }}"

    - name: Notify on failure
      if: needs.build-and-push.result == 'failure'
      run: |
        echo "❌ Docker镜像构建失败！"
        exit 1 
